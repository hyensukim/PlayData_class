2023.10.01
* 추가로 필요한 지식
- 쿠버네티스(Kubernetes)

? 모놀리식 아키텍처 VS 마이크로서비스 아키텍처

- 모놀리식 아키텍처
애플리케이션 안에 모든 비지니스 로직이 하나로 다들어가 있는 구조 Monolithic.

Ex) 쇼핑몰 앱
* 사용자 관리
* 상품 관리
* 주문 관리

- 마이크로서비스
서비스를 비지니스 경계에 맞게 세분화하고,
서비스 간 통신은 네트워크 호출을 통해 진행하여
확장 가능하고 회복적이며 유연한 애플리케이션을 구성하는 것.

? MSA라는 아키텍처가 왜 인기가 많을까?
- 기존 모놀리식 방식은 소프트웨어의 모든 구성요소가 한 프로젝트에 합쳐져있어, 큰 변환에 대한 대응이 어려우며, 새로운 기능 추가 및 업데이트에 어려움이 있음.
- 여러 역할을 하는 시스템이 하나의 소프트웨어로 집합 되어 있어,* 특정 부분에 문제 발생 시, 큰 장애로 이어질 수 있다.
- 여러 역할을 하는 시스템이 하나의 서버와 함께 올라가있기에, Scale-Out 시 필요 없는 자원이 함께 증가된다.
- 민첩하고 손쉬운 배포 및 업데이트가 편리하다.

? MSA라는 아키텍처를 구성하기 위해 어떤 기술과 구성요소를 알아야 하는지?
- MSA를 구성하는 주요 Component
	1. Config Management : 서비스의 재빌드/재부팅 없이 설정사항을 반영(Neflix Archaius)
	2. Service Discovery : MSA 기반 서비스 배포 시 서비스 검색 및 등록
3. API Management : 클라이언트 접근 요청을 일원화.
4. Centralized Logging : 서비스별 로그의 중앙집중화
5. Distributed Tracing : 마이크로서비스 간의 호출 추적
6. Centralized Monitoring : 서비스별 메트릭 정보의 중앙집중화.
7. Resilience & Fault Tolerance : MSA 구조에서 하나의 실패한 서비스가 체인에 연결된 전체 서비스들에 파급 효과를 발생시키지 않도록 하기 위한 계단식 실패 방지 구조.
8. Auto-Scaling & Self-Healing : 자동 스케일링, 복구 자동화를 통한 서비스 관리 효율화.

? MSA를 구현하는 기반 기술
- Spring cloud와 Kubernetes는 둘 다 마이크로 서비스를 개발하고 실해앟기에 최적의 환경이지만, 그 특징이 서로 상이하다.

? MSA를 구축하면서 직면할 수 있는 어려움은?
1. 복잡성
서비스 메쉬를 사용하면 런타임 인스턴스의 갯수갖 ㅡㅇ가.

2. 사이드카 컨테이너 수 증가
각 서비스는 서비스 메쉬의 사이드카 프록시를 통해 호출되므로 개별 프록시 수가 증가하게 된다. 이에 따른 부하로 서비스 운영에 문제가 발생할 가능성이 있는지에 대해 아키텍처 구조 측면에서 사전에 검토가 필요하다.

3. 기술력의 미성숙
빠르게 발전하고 있으나 아직은 새롭고 미성숙한 기술에 속한다. 또한 많은 기업이 서비스 메쉬에 대한 경험이 없는 실정이다.






