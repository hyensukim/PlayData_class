MSA란?
- MicroService Architecture
- 애플리케이션을 느슨하게 결합된 서비스의 모임으로 구조화하는 소프트웨어 아키텍처 스타일.(위키백과)
- 느슨한 결합 : 각 서비스들이 독립적으로 실행되고 서로 통신을 하지만, 문제 발생 시 서로 크게 영향을 받지 않는 유연한 서비스 구조.-

어떤 구조로 애플리케이션의 아키텍처를 설계할 지 설계.(집의 설계 구조 Ex, 단독주택, 연립주택, 아파트, 주상복합몰) 
- 아키텍처(소프트웨어 설계 구조)
	- 모놀리딕 : 각 서비스들이 강하게 결합되어 하나의 전체 시스템을 이루는 구조
	- 마이크로서비스 : 작은 서비스 단위로 분리하고 느슨한 결합을 통해 벌집처럼 모여 하나의 저체 시스템을 이루는 구조
- 모놀리식 아키텍처(Monolithic Architecture) : 간단, 흐름단계별로 설계가 되어서 데이터 정합성을 맞추기 쉽고, 금방 설계
하지만, 서비스가 커질수록 장점보다는 단점이 많아지는 구조, 즉 구조가 간단하고 비교적 빠른 설계가 가능하지만, 클라우드의 빠른 확장성과 유연한 인프라 환경구조에는 부적합.
1단계 : 서비스를 요청 받는 부분
2단계 : 요청을 처리하는 부분
3단계 : 데이터를 저장하는 부분

- 마이크로서비스 아키텍처 : 향후 서비스 확장을 고려하여 설계된 구조, 전체 시스템을 작은 서비스 단위로 분리, 각 서비스를 독립적으로 개발, 종속성이 낮아서 고려할 사항이 적다, 독립적으로 배포 가능, 시스템 장애로 전파되지 않음.
하지만, 구조가 복잡해서 관리가 어렵다, 서비스 통신이 복잡해서 개발이 어렵다.

MSA 아키텍처의 설계 원칙.
- 각 기능들이 '느슨한 결합'을  가지면서 '상호 의존 없이' 단일 목적으로 기능을 수행하도록 설계.
- 장애 전파 : 하나의 서비스에서 발생한 장애가 다른 서비스로 전파되는 현상.
- 서비스가 늘어날수록 통신에 많은 비용이 소요되어 관리가 어렵다.

효율적인 마이크로서비스 관리
- 서비스 메시 구조로 설계.
	- 매순간 통신해야 하는 마이크로 서비스를 찾고 연결하는 과정을 자동으로 처리.
	- 부하분산(Load Balancing) : 한 서버에 트래픽이 과도하게 집중되는 것을 방지하기 위해 적절히 데이터의 경로를 설정하는 기능.
	- 서비스 마다 Proxy(Sidecar)를 적용한다.

MSA 도입 시 고려사항
- Why? 
다른 기업들을 따라서 도입하는 것은 매우 위험.
명확한 목적성을 가지고 MSA로 전환해야함.
다방면에서 바라본 후 도입.

- 기술만의 관점에서 바라보는 것은 금물
DevOps 팀도 필요.(수정된 사항을 바로 반영하기 위함)
